# --- Purpose --- 
# Get a slack alert when a cluster has been disconnected for longer than your defined interval (default is 1 hour) 
# The intent is to run this script on a scheduled interval of your choice to work as a proactive disconnected alerting system.
# 
# --- Required Steps ---
# ALL USERS need to: 
# 1. populate the API_KEY variable with an API key they generated from fleet.scalecomputing.com.
# 2. input your webhook URL generated by the workflow builder,and to have your workflow accept "text" as a variable. https://slack.com/help/articles/360035692513-Guide-to-Slack-Workflow-Builder
# 
# --- Optional Configuration ---
# Customize the Message variables as needed for your preferences
# Note: If you have >200 clusters, you will need to implement offsets and limits to iterate through all clusters
# Increase or decrease the timedelta required to consider a cluster disconnected (default is 1 hour)
# Modify the script if you do not want to be notifed when al clusters are online.
#
# --- How this script works ---
# This script gets all clusters, looks at how long in the past the lastCheckin value is, and if it exceeds hte defined tiem delta, sends a slack alert about the cluster(s) being offline. If no clusters are offline, a confirmation message is sent.

import requests
import json
from datetime import datetime, timezone, timedelta

# User-provided API and Webhook details
API_KEY = 'INSERT API KEY' # You must replace this with your actual API Key
SLACK_WEBHOOK_URL = 'INSERT SLACK WEBHOOK URL' # You must replace this with your actual Slack webhook URL

# API endpoint details
API_URL = 'https://api.scalecomputing.com/api/v2/clusters?offset=0&limit=200'
HEADERS = {
    'accept': 'application/json',
    'api-key': API_KEY
}

def get_stale_clusters():
    """Fetches clusters from the API and identifies those with stale check-ins."""
    try:
        response = requests.get(API_URL, headers=HEADERS)
        response.raise_for_status()  # Raises an HTTPError for bad responses (4xx or 5xx)
        data = response.json()
        
        stale_clusters = []
        now = datetime.now(timezone.utc)
        
        for item in data.get('items', []):
            last_checkin_str = item.get('lastCheckin')
            if last_checkin_str:
                last_checkin_time = datetime.fromisoformat(last_checkin_str.replace('Z', '+00:00'))
                time_difference = now - last_checkin_time
                
                if time_difference > timedelta(hours=1): # Optional: change the "disconnected time" from the default one hour here
                    stale_clusters.append({
                        'id': item.get('id'),
                        'name': item.get('name'),
                        'lastCheckin': last_checkin_str,
                        'onlineStatus': item.get('onlineStatus'),
                        'healthState': item.get('healthState')
                    })
        return stale_clusters
        
    except requests.exceptions.RequestException as e:
        print(f"Error making API request: {e}")
        return None
        
def send_slack_message(clusters):
    """Formats and sends a message to Slack via webhook."""
    if not clusters:
        message = "All clusters have checked in within the last hour. No issues found. âœ…"
    else:
        cluster_list = '\n'.join([
            f"- Cluster Name: {c['name']}, Last Checkin: {c['lastCheckin']}, Status: {c['healthState']}, FM URL: https://fleet.scalecomputing.com/clusters/{c['id']}"
            for c in clusters
        ])
        message = f"ðŸš¨ The following clusters have not checked in for over an hour:\n\n{cluster_list}"
        
    slack_payload = {
        "text": message
    }
    
    try:
        response = requests.post(SLACK_WEBHOOK_URL, data=json.dumps(slack_payload), headers={'Content-Type': 'application/json'})
        response.raise_for_status()
        print("Slack message sent successfully.")
    except requests.exceptions.RequestException as e:
        print(f"Error sending message to Slack: {e}")

if __name__ == '__main__':
    stale_clusters = get_stale_clusters()
    if stale_clusters is not None:
        send_slack_message(stale_clusters)
